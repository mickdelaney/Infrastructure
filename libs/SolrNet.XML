<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SolrNet</name>
    </assembly>
    <members>
        <member name="T:SolrNet.Startup">
            <summary>
            SolrNet initialization manager
            </summary>
        </member>
        <member name="M:SolrNet.Startup.Init``1(System.String)">
            <summary>
            Initializes SolrNet with the built-in container
            </summary>
            <typeparam name="T">Document type</typeparam>
            <param name="serverURL">Solr URL (i.e. "http://localhost:8983/solr")</param>
        </member>
        <member name="M:SolrNet.Startup.Init``1(SolrNet.ISolrConnection)">
            <summary>
            Initializes SolrNet with the built-in container
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connection"></param>
        </member>
        <member name="T:SolrNet.Impl.SolrDocumentSerializer`1">
            <summary>
            Serializes a Solr document to xml
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.ISolrDocumentSerializer`1">
            <summary>
            Serializes a solr document to xml. 
            </summary>
            <typeparam name="T">document type</typeparam>
        </member>
        <member name="M:SolrNet.ISolrDocumentSerializer`1.Serialize(`0,System.Nullable{System.Double})">
            <summary>
            Serializes a Solr document to xml, applying an index-time boost
            </summary>
            <param name="doc">document to serialize</param>
            <param name="boost"></param>
            <returns>serialized document</returns>
        </member>
        <member name="T:SolrNet.ISolrFacetQuery">
            <summary>
            Facet query interface
            </summary>
        </member>
        <member name="P:SolrNet.ISolrFacetQuery.Query">
            <summary>
            Represents this query as solr parameters
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.SolrConnectionException">
            <summary>
            Error connecting to Solr. See inner exception for more information.
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.SolrNetException">
            <summary>
            Base exception for all exceptions thrown by SolrNet
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.ISolrDeleteParam">
            <summary>
            Delete command parameter
            </summary>
        </member>
        <member name="M:SolrNet.Commands.Parameters.ISolrDeleteParam.ToXmlNode">
            <summary>
            Converts this parameter to xml representation
            </summary>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.NullCache">
            <summary>
            Cache implementation that doesn't cache anything.
            Use it when you want to disable http caching.
            </summary>
        </member>
        <member name="T:SolrNet.Impl.ISolrCache">
            <summary>
            HTTP cache
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.TypeConvertingFieldParser">
            <summary>
            Parses using <see cref="T:System.ComponentModel.TypeConverter"/>
            </summary>
        </member>
        <member name="T:SolrNet.Impl.ISolrFieldParser">
            <summary>
            Parses a single Solr XML result node
            </summary>
        </member>
        <member name="M:SolrNet.Impl.ISolrFieldParser.CanHandleSolrType(System.String)">
            <summary>
            True if this parser can handle the solrType (int, bool, str, ...)
            </summary>
            <param name="solrType"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ISolrFieldParser.CanHandleType(System.Type)">
            <summary>
            True if this parser can handle a type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ISolrFieldParser.Parse(System.Xml.XmlNode,System.Type)">
            <summary>
            Parses a single Solr XML result node
            </summary>
            <param name="field">Solr XML result node</param>
            <param name="t">Type the node value should be converted to</param>
            <returns>Parsed value</returns>
        </member>
        <member name="M:SolrNet.Impl.FieldParsers.TypeConvertingFieldParser.GetUnderlyingType(System.Xml.XmlNode,System.Type)">
            <summary>
            Gets the corresponding CLR Type to a solr type
            </summary>
            <param name="field"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.DocumentPropertyVisitors.DefaultDocumentVisitor">
            <summary>
            Default document visitor
            </summary>
        </member>
        <member name="T:SolrNet.Impl.ISolrDocumentPropertyVisitor">
            <summary>
            Visits a document with a raw xml Solr response field
            </summary>
        </member>
        <member name="M:SolrNet.Impl.ISolrDocumentPropertyVisitor.Visit(System.Object,System.String,System.Xml.XmlNode)">
            <summary>
            Visits a document with a raw xml Solr response field
            </summary>
            <param name="doc">Document object</param>
            <param name="fieldName">Solr field name</param>
            <param name="field">Raw XML Solr field</param>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.DefaultDocumentVisitor.#ctor(SolrNet.IReadOnlyMappingManager,SolrNet.Impl.ISolrFieldParser)">
            <summary>
            Default document visitor
            </summary>
            <param name="mapper"></param>
            <param name="parser"></param>
        </member>
        <member name="T:SolrNet.Impl.SolrConnection">
            <summary>
            Manages HTTP connection with Solr
            </summary>
        </member>
        <member name="T:SolrNet.ISolrConnection">
            <summary>
            Manages HTTP connection with Solr
            </summary>
        </member>
        <member name="M:SolrNet.ISolrConnection.Post(System.String,System.String)">
            <summary>
            POSTs to Solr
            </summary>
            <param name="relativeUrl">Path to post to</param>
            <param name="s">POST content</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrConnection.Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            GETs from Solr
            </summary>
            <param name="relativeUrl">Path to get from</param>
            <param name="parameters">Query string parameters</param>
            <returns></returns>
        </member>
        <member name="P:SolrNet.ISolrConnection.ServerURL">
            <summary>
            Solr url (e.g. http://localhost:8983/solr)
            </summary>
        </member>
        <member name="P:SolrNet.ISolrConnection.Version">
            <summary>
            Solr's response format. 2.2 by default. Do not modify this unless you really know what you're doing.
            </summary>
        </member>
        <member name="M:SolrNet.Impl.SolrConnection.GetResponse(HttpWebAdapters.IHttpWebRequest)">
            <summary>
            Gets http response, returns (etag, data)
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="P:SolrNet.Impl.SolrConnection.Cache">
            <summary>
            HTTP cache implementation
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SolrConnection.Version">
            <summary>
            Solr XML response syntax version
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SolrConnection.Timeout">
            <summary>
            HTTP connection timeout
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrQueryResultParser`1">
            <summary>
            Default query results parser.
            Parses xml query results
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.ISolrQueryResultParser`1">
            <summary>
            Query results parser interface
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.ISolrQueryResultParser`1.Parse(System.String)">
            <summary>
            Parses solr's response
            </summary>
            <param name="r">solr response</param>
            <returns>query results</returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryResultParser`1.Parse(System.String)">
            <summary>
            Parses solr's xml response
            </summary>
            <param name="r">solr xml response</param>
            <returns>query results</returns>
        </member>
        <member name="T:SolrNet.AbstractSolrQuery">
            <summary>
            Abstract Solr query, used to define operator overloading
            </summary>
        </member>
        <member name="T:SolrNet.ISolrQuery">
            <summary>
            Base query interface
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQuery.Query">
            <summary>
            query string
            </summary>
        </member>
        <member name="M:SolrNet.AbstractSolrQuery.Not">
            <summary>
            Negates this query
            </summary>
            <returns></returns>
        </member>
        <member name="M:SolrNet.AbstractSolrQuery.Boost(System.Double)">
            <summary>
            Boosts this query
            </summary>
            <param name="factor"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Commands.PingCommand">
            <summary>
            Pings the Solr server.
            It can be used by a load balancer in front of a set of Solr servers to check response time of all the Solr servers in order to do response time based load balancing.
            See <see cref="!:http://wiki.apache.org/solr/SolrConfigXml"/> for more information.
            </summary>
        </member>
        <member name="T:SolrNet.ISolrCommand">
            <summary>
            Command interface
            </summary>
        </member>
        <member name="M:SolrNet.ISolrCommand.Execute(SolrNet.ISolrConnection)">
            <summary>
            Executes this command
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.TypeConvertingFieldSerializer">
            <summary>
            Serializes using <see cref="T:System.ComponentModel.TypeConverter"/>s
            </summary>
        </member>
        <member name="T:SolrNet.Impl.ISolrFieldSerializer">
            <summary>
            Serializes a value to be consumed by the Solr update handler
            </summary>
        </member>
        <member name="M:SolrNet.Impl.ISolrFieldSerializer.CanHandleType(System.Type)">
            <summary>
            True if this serializer can handle the type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ISolrFieldSerializer.Serialize(System.Object)">
            <summary>
            Serializes a value to be consumed by the Solr update handler
            </summary>
            <param name="obj">object to serialize</param>
            <returns>List of <see cref="T:SolrNet.Impl.PropertyNode"/>s, each represents a XML node to be passed to the Solr update handler</returns>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer">
            <summary>
            Serializes <see cref="T:System.Collections.Generic.IDictionary`2"/> properties
            </summary>
        </member>
        <member name="M:SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer.KVKey(System.Object)">
            <summary>
            Gets the key from a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <param name="kv"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.FieldSerializers.GenericDictionaryFieldSerializer.KVValue(System.Object)">
            <summary>
            Gets the value from a <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            </summary>
            <param name="kv"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.DocumentPropertyVisitors.RegularDocumentVisitor">
            <summary>
            Pass-through document visitor
            </summary>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.RegularDocumentVisitor.#ctor(SolrNet.Impl.ISolrFieldParser,SolrNet.IReadOnlyMappingManager)">
            <summary>
            Pass-through document visitor
            </summary>
            <param name="parser"></param>
            <param name="mapper"></param>
        </member>
        <member name="T:SolrNet.Commands.Parameters.CollapseType">
            <summary>
            Parameters to query collapse
            <see cref="!:https://issues.apache.org/jira/browse/SOLR-236"/>
            </summary>
        </member>
        <member name="F:SolrNet.Commands.Parameters.CollapseType.Normal">
            <summary>
            Collapse all documents having equal collapsing field
            </summary>
        </member>
        <member name="F:SolrNet.Commands.Parameters.CollapseType.Adjacent">
            <summary>
            Collapse only consecutive documents
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.CollapseFacetMode">
            <summary>
            Controls if collapsing happens before or after faceting
            </summary>
        </member>
        <member name="F:SolrNet.Commands.Parameters.CollapseFacetMode.Before">
            <summary>
            Faceting happens before collapsing
            </summary>
        </member>
        <member name="F:SolrNet.Commands.Parameters.CollapseFacetMode.After">
            <summary>
            Faceting happens after collapsing
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.CollapseParameters">
            <summary>
            Parameters to query collapse
            <see cref="!:https://issues.apache.org/jira/browse/SOLR-236"/>
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CollapseParameters.Field">
            <summary>
            Field to group results by
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CollapseParameters.Max">
            <summary>
            Number of continuous results allowed before collapsing
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CollapseParameters.MaxDocs">
            <summary>
            limits the number of documents that CollapseFilter will process to create the filter DocSet. 
            The intention of this is to be able to limit the time collapsing will take for very large result sets 
            (obviously at the expense of accurate collapsing in those cases).
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CollapseParameters.FacetMode">
            <summary>
            Number of continuous results allowed before collapsing
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CollapseParameters.Type">
            <summary>
            Collapse type: Adjacent or Normal
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.InvalidURLException">
            <summary>
            Invalid URL specified
            </summary>
        </member>
        <member name="T:SolrNet.SolrFacetFieldQuery">
            <summary>
            Facet field query
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.Field">
            <summary>
            Facet field
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.Prefix">
            <summary>
            Limits the terms on which to facet to those starting with the given string prefix.
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.Sort">
            <summary>
            Set to true, this parameter indicates that constraints should be sorted by their count. 
            If false, facets will be in their natural index order (unicode). 
            For terms in the ascii range, this will be alphabetically sorted. 
            The default is true if Limit is greater than 0, false otherwise.
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.Limit">
            <summary>
            This param indicates the maximum number of constraint counts that should be returned for the facet fields. 
            A negative value means unlimited. 
            The default value is 100. 
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.Offset">
            <summary>
            This param indicates an offset into the list of constraints to allow paging. 
            The default value is 0. 
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.MinCount">
            <summary>
            This param indicates the minimum counts for facet fields should be included in the response.
            The default value is 0.
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.Missing">
            <summary>
            Set to true this param indicates that in addition to the Term based constraints of a facet field, a count of all matching results which have no value for the field should be computed
            Default is false
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetFieldQuery.EnumCacheMinDf">
            <summary>
            This param indicates the minimum document frequency (number of documents matching a term) for which the filterCache should be used when determining the constraint count for that term. 
            This is only used during the term enumeration method of faceting (field type faceting on multi-valued or full-text fields).
            A value greater than zero will decrease memory usage of the filterCache, but increase the query time. 
            When faceting on a field with a very large number of terms, and you wish to decrease memory usage, try a low value of 25 to 50 first.
            The default value is 0, causing the filterCache to be used for all terms in the field.
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.CollectionFieldParser">
            <summary>
            Parses 1-dimensional fields
            </summary>
        </member>
        <member name="T:SolrNet.Commands.RollbackCommand">
            <summary>
            Rollbacks all add/deletes made to the index since the last commit.
            </summary>
        </member>
        <member name="T:SolrNet.SolrQueryByField">
            <summary>
            Queries a field for a value
            </summary>
        </member>
        <member name="P:SolrNet.SolrQueryByField.Query">
            <summary>
            query string
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.ToStringFieldSerializer">
            <summary>
            Serializes using .ToString()
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.CollectionFieldSerializer">
            <summary>
            Serializes 1-dimensional collections
            </summary>
        </member>
        <member name="T:SolrNet.DateFacetingResult">
            <summary>
            Date faceting result
            <see cref="!:http://wiki.apache.org/solr/SimpleFacetParameters#head-068dc96b0dac1cfc7264fe85528d7df5bf391acd"/>
            </summary>
        </member>
        <member name="P:SolrNet.DateFacetingResult.Gap">
            <summary>
            The gap.
            </summary>
        </member>
        <member name="P:SolrNet.DateFacetingResult.End">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:SolrNet.DateFacetingResult.DateResults">
            <summary>
            The date faceting results.
            </summary>
        </member>
        <member name="P:SolrNet.DateFacetingResult.OtherResults">
            <summary>
            Other date faceting results.
            </summary>
        </member>
        <member name="T:SolrNet.CollapseResults">
            <summary>
            Collapse results
            <see cref="!:https://issues.apache.org/jira/browse/SOLR-236"/>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:SolrNet.CollapseResults.Field" -->
        <member name="P:SolrNet.CollapseResults.DocResults">
            <summary>
            Collapsed document.ids and their counts
            </summary>
        </member>
        <member name="P:SolrNet.CollapseResults.CountResults">
            <summary>
            Collapsed field values and their counts
            </summary>
        </member>
        <member name="T:SolrNet.SolrQueryByRange`1">
            <summary>
            Queries a field for a range
            </summary>
            <typeparam name="RT"></typeparam>
        </member>
        <member name="P:SolrNet.SolrQueryByRange`1.Query">
            <summary>
            query string
            </summary>
        </member>
        <member name="T:SolrNet.Mapping.MemoizingMappingManager">
            <summary>
            Memoizing decorator for a mapping manager
            </summary>
        </member>
        <member name="T:SolrNet.IReadOnlyMappingManager">
            <summary>
            Service interface for mapping Solr fields to object properties
            </summary>
        </member>
        <member name="M:SolrNet.IReadOnlyMappingManager.GetFields(System.Type)">
            <summary>
            Gets fields mapped for this type
            </summary>
            <param name="type"></param>
            <returns>Empty collection if <paramref name="type"/> is not mapped</returns>
        </member>
        <member name="M:SolrNet.IReadOnlyMappingManager.GetUniqueKey(System.Type)">
            <summary>
            Gets unique key for the type
            </summary>
            <exception cref="T:SolrNet.Exceptions.NoUniqueKeyException">Thrown when <paramref name="type"/> has no unique key defined</exception>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Mapping.MemoizingMappingManager.GetFields(System.Type)">
            <summary>
            Gets fields mapped for this type
            </summary>
            <param name="type"></param>
            <returns>Null if <paramref name="type"/> is not mapped</returns>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.SpellCheckResponseParser`1">
            <summary>
            Parses spell-checking results from a query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.Impl.ISolrResponseParser`1">
            <summary>
            Parses a chunk of a query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ISolrResponseParser`1.Parse(System.Xml.XmlDocument,SolrNet.SolrQueryResults{`0})">
            <summary>
            Parses a chunk of a query response into the results object
            </summary>
            <param name="xml">query response</param>
            <param name="results">results object</param>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.SpellCheckResponseParser`1.ParseSpellChecking(System.Xml.XmlNode)">
            <summary>
            Parses spell-checking results
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.MoreLikeThisResponseParser`1">
            <summary>
            Parses more-like-this results from a query response
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.MoreLikeThisResponseParser`1.ParseMoreLikeThis(System.Collections.Generic.IEnumerable{`0},System.Xml.XmlNode)">
            <summary>
            Parses more-like-this results
            </summary>
            <param name="results"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Commands.Parameters.DeleteByIdAndOrQueryParam">
            <summary>
            Parameter to delete document(s) by one or more ids
            and or a query parameters.
            </summary>
        </member>
        <member name="M:SolrNet.Utils.StringHelper.ToNullOrString(System.Object)">
            <summary>
            Converts an object to null string if null or executes ToString() on it.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.SolrMultipleCriteriaQuery">
            <summary>
            Represents several queries as one
            </summary>
        </member>
        <member name="M:SolrNet.SolrMultipleCriteriaQuery.Create(SolrNet.ISolrQuery[])">
            <summary>
            Static create helper
            </summary>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.SolrMultipleCriteriaQuery.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Static create helper
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queries"></param>
            <returns></returns>
        </member>
        <member name="P:SolrNet.SolrMultipleCriteriaQuery.Queries">
            <summary>
            Queries contained in this multiple criteria
            </summary>
        </member>
        <member name="P:SolrNet.SolrMultipleCriteriaQuery.Oper">
            <summary>
            Operator used for joining these queries
            </summary>
        </member>
        <member name="P:SolrNet.SolrMultipleCriteriaQuery.Query">
            <summary>
            query string
            </summary>
        </member>
        <member name="T:SolrNet.SolrMultipleCriteriaQuery.Operator">
            <summary>
            Operator to apply to the included queries
            </summary>
        </member>
        <member name="T:SolrNet.ResponseHeader">
            <summary>
            Operation response header
            </summary>
        </member>
        <member name="P:SolrNet.ResponseHeader.Status">
            <summary>
            Result status (0 is OK)
            </summary>
        </member>
        <member name="P:SolrNet.ResponseHeader.QTime">
            <summary>
            Time this operation took in ms
            </summary>
        </member>
        <member name="P:SolrNet.ResponseHeader.Params">
            <summary>
            Parameters defined in this operation
            </summary>
        </member>
        <member name="T:SolrNet.ISolrBasicOperations`1">
            <summary>
            Solr operations without convenience overloads
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.ISolrBasicReadOnlyOperations`1">
            <summary>
            Read-only operations without convenience overloads
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.Query(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Executes a query
            </summary>
            <param name="query"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrBasicReadOnlyOperations`1.Ping">
            <summary>
            Pings the Solr server.
            It can be used by a load balancer in front of a set of Solr servers to check response time of all the Solr servers in order to do response time based load balancing.
            See http://wiki.apache.org/solr/SolrConfigXml for more information.
            </summary>
        </member>
        <member name="M:SolrNet.ISolrBasicOperations`1.Commit(SolrNet.Commands.Parameters.CommitOptions)">
            <summary>
            Commits posted documents
            </summary>
            <param name="options">Commit options</param>
        </member>
        <member name="M:SolrNet.ISolrBasicOperations`1.Optimize(SolrNet.Commands.Parameters.CommitOptions)">
            <summary>
            Optimizes Solr's index
            </summary>
            <param name="options">Optimization options</param>
        </member>
        <member name="M:SolrNet.ISolrBasicOperations`1.Rollback">
            <summary>
            Rollbacks all add/deletes made to the index since the last commit.
            </summary>
        </member>
        <member name="M:SolrNet.ISolrBasicOperations`1.AddWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}})">
            <summary>
            Adds / updates several documents with index-time boost
            </summary>
            <param name="docs"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrBasicOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String},SolrNet.ISolrQuery)">
            <summary>
            Deletes all documents that match the given id's or the query
            </summary>
            <param name="ids">document ids to delete</param>
            <param name="q">query to match</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrBasicOperations`1.Send(SolrNet.ISolrCommand)">
            <summary>
            Sends a custom command
            </summary>
            <param name="cmd">command to send</param>
            <returns>solr response</returns>
        </member>
        <member name="T:SolrNet.Exceptions.InvalidFieldException">
            <summary>
            Solr did not understand one the specified fields
            </summary>
        </member>
        <member name="T:SolrNet.Commands.OptimizeCommand">
            <summary>
            Optimizes Solr's index
            See the <see cref="!:http://wiki.apache.org/jakarta-lucene/LuceneFAQ">Lucene FAQ</see> for more information.
            </summary>
        </member>
        <member name="M:SolrNet.Commands.OptimizeCommand.Execute(SolrNet.ISolrConnection)">
            <summary>
            Executes this command
            </summary>
            <param name="connection"></param>
            <returns></returns>
        </member>
        <member name="P:SolrNet.Commands.OptimizeCommand.WaitFlush">
            <summary>
            Block until index changes are flushed to disk
            Default is true
            </summary>
        </member>
        <member name="P:SolrNet.Commands.OptimizeCommand.WaitSearcher">
            <summary>
            Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
            Default is true
            </summary>
        </member>
        <member name="P:SolrNet.Commands.OptimizeCommand.ExpungeDeletes">
            <summary>
            Merge segments with deletes away
            Default is false
            </summary>
        </member>
        <member name="P:SolrNet.Commands.OptimizeCommand.MaxSegments">
            <summary>
            Optimizes down to, at most, this number of segments
            Default is 1
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CommitOptions.WaitSearcher">
            <summary>
            Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
            Default is true
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CommitOptions.WaitFlush">
            <summary>
            Block until index changes are flushed to disk
            Default is true
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CommitOptions.MaxSegments">
            <summary>
            Optimizes down to at most this number of segments
            Default is 1
            </summary>
            <remarks>Requires Solr 1.3</remarks>
        </member>
        <member name="P:SolrNet.Commands.Parameters.CommitOptions.ExpungeDeletes">
            <summary>
            Merge segments with deletes away
            </summary>
            <remarks>Requires Solr 1.4</remarks>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1">
            <summary>
            Parses highlighting results from a query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1.ParseHighlighting(System.Collections.Generic.IEnumerable{`0},System.Xml.XmlNode)">
            <summary>
            Parses highlighting results
            </summary>
            <param name="results"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.HighlightingResponseParser`1.ParseHighlightingFields(System.Xml.XmlNodeList)">
            <summary>
            Parses highlighting results
            </summary>
            <param name="nodes"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.ISolrDocumentIndexer`1">
            <summary>
            Indexes documents by primary key
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ISolrDocumentIndexer`1.IndexResultsByKey(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an index of documents by unique key
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.BoolFieldSerializer">
            <summary>
            Parses bool values
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.AbstractFieldSerializer`1">
            <summary>
            Strongly-typed abstract field parser
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.FloatFieldParser">
            <summary>
            Parses float values
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.DateTimeFieldParser">
            <summary>
            Parses datetime fields
            </summary>
        </member>
        <member name="T:SolrNet.Utils.Container">
            <summary>
            Basic built-in dependency-injection container
            </summary>
        </member>
        <member name="T:SolrNet.Utils.IContainer">
            <summary>
            Interface for the built-in DI container
            </summary>
        </member>
        <member name="M:SolrNet.Utils.IContainer.Register``1(System.Converter{SolrNet.Utils.IContainer,``0})">
            <summary>
            Adds a component implementing <typeparamref name="T"/>
            Component key is <typeparamref name="T"/>'s <see cref="P:System.Type.FullName"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="factory">Component factory method</param>
        </member>
        <member name="M:SolrNet.Utils.IContainer.Register``1(System.String,System.Converter{SolrNet.Utils.IContainer,``0})">
            <summary>
            Adds a component implementing <typeparamref name="T"/> with the specified key
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="factory">Component factory method</param>
            <param name="key">Component key</param>
        </member>
        <member name="M:SolrNet.Utils.IContainer.Register(System.String,System.Type,System.Converter{SolrNet.Utils.IContainer,System.Object})">
            <summary>
            Adds a component
            </summary>
            <param name="key">Component key</param>
            <param name="serviceType">Component service type</param>
            <param name="factory">Component factory method. Must return <paramref name="serviceType"/> or a descendant</param>
        </member>
        <member name="M:SolrNet.Utils.IContainer.RemoveAll``1">
            <summary>
            Removes all components with service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
        </member>
        <member name="M:SolrNet.Utils.IContainer.Remove``1">
            <summary>
            Removes the default component for service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
        </member>
        <member name="M:SolrNet.Utils.IContainer.Remove``1(System.String)">
            <summary>
            Removes the component with key <paramref name="key"/> implementing service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="key">Component key</param>
        </member>
        <member name="M:SolrNet.Utils.IContainer.Remove(System.String,System.Type)">
            <summary>
            Removes the component with key <paramref name="key"/> implementing service type <paramref name="serviceType"/>
            </summary>
            <param name="key">Component key</param>
            <param name="serviceType">Service type</param>
        </member>
        <member name="M:SolrNet.Utils.Container.#ctor(SolrNet.Utils.Container)">
            <summary>
            Creates a new container copying all components from another container
            </summary>
            <param name="c"></param>
        </member>
        <member name="M:SolrNet.Utils.Container.Register``1(System.Converter{SolrNet.Utils.IContainer,``0})">
            <summary>
            Adds a component implementing <typeparamref name="T"/>
            Component key is <typeparamref name="T"/>'s <see cref="P:System.Type.FullName"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="factory">Component factory method</param>
        </member>
        <member name="M:SolrNet.Utils.Container.Register``1(System.String,System.Converter{SolrNet.Utils.IContainer,``0})">
            <summary>
            Adds a component implementing <typeparamref name="T"/> with the specified key
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="factory">Component factory method</param>
            <param name="key">Component key</param>
        </member>
        <member name="M:SolrNet.Utils.Container.Register(System.String,System.Type,System.Converter{SolrNet.Utils.IContainer,System.Object})">
            <summary>
            Adds a component
            </summary>
            <param name="key">Component key</param>
            <param name="serviceType">Component service type</param>
            <param name="factory">Component factory method. Must return <paramref name="serviceType"/> or a descendant</param>
        </member>
        <member name="M:SolrNet.Utils.Container.RemoveAll``1">
            <summary>
            Removes all components with service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
        </member>
        <member name="M:SolrNet.Utils.Container.Remove``1">
            <summary>
            Removes the default component for service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
        </member>
        <member name="M:SolrNet.Utils.Container.Remove``1(System.String)">
            <summary>
            Removes the component with key <paramref name="key"/> implementing service type <typeparamref name="T"/>
            </summary>
            <typeparam name="T">Service type</typeparam>
            <param name="key">Component key</param>
        </member>
        <member name="M:SolrNet.Utils.Container.Remove(System.String,System.Type)">
            <summary>
            Removes the component with key <paramref name="key"/> implementing service type <paramref name="serviceType"/>
            </summary>
            <param name="key">Component key</param>
            <param name="serviceType">Service type</param>
        </member>
        <member name="M:SolrNet.Utils.Container.Clear">
            <summary>
            Removes all component registrations from this container
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrBasicServer`1">
            <summary>
            Implements the basic Solr operations
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.SolrQueryResults`1">
            <summary>
            Query results
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.ISolrQueryResults`1">
            <summary>
            Query results.
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.NumFound">
            <summary>
            Total documents found
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.MaxScore">
            <summary>
            Max score in these results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.FacetQueries">
            <summary>
            Facet queries results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.FacetFields">
            <summary>
            Facet field queries results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.Header">
            <summary>
            Query response header
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.Highlights">
            <summary>
            Highlight results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.SpellChecking">
            <summary>
            Spell checking results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.SimilarResults">
            <summary>
            More-like-this results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.Stats">
            <summary>
            Stats results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.Collapsing">
            <summary>
            Collapse results
            </summary>
        </member>
        <member name="P:SolrNet.ISolrQueryResults`1.FacetDates">
            <summary>
            Date faceting results
            </summary>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
            
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:SolrNet.SolrQueryResults`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:SolrNet.SolrQueryResults`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            
            <returns>
            The element at the specified index.
            </returns>
            
            <param name="index">The zero-based index of the element to get or set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
        </member>
        <member name="P:SolrNet.SolrQueryResults`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            
        </member>
        <member name="P:SolrNet.SolrQueryResults`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.
            </returns>
            
        </member>
        <member name="T:SolrNet.SolrQuery">
            <summary>
            Basic solr query
            </summary>	
        </member>
        <member name="M:SolrNet.SolrQuery.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="query">solr query to execute</param>
        </member>
        <member name="P:SolrNet.SolrQuery.Query">
            <summary>
            query to execute
            </summary>
        </member>
        <member name="P:SolrNet.SolrQuery.All">
            <summary>
            Represents a query for all documents ("*:*")
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.FieldNotFoundException">
            <summary>
            OBSOLETE
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.BadMappingException">
            <summary>
            Base exception for mapping errors
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.QueryOptions">
            <summary>
            Query options
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Fields">
            <summary>
            Fields to retrieve.
            By default, all stored fields are returned
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Start">
            <summary>
            Offset in the complete result set for the queries where the set of returned documents should begin
            Default is 0
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Rows">
            <summary>
            Maximum number of documents from the complete result set to return to the client for every request.
            Default is 10
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.OrderBy">
            <summary>
            Sort order.
            By default, it's "score desc"
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Highlight">
            <summary>
            Highlighting parameters
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Facet">
            <summary>
            Facet parameters
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.SpellCheck">
            <summary>
            Spell-checking parameters
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.MoreLikeThis">
            <summary>
            More-like-this parameters
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.FilterQueries">
            <summary>
            This parameter can be used to specify a query that can be used to restrict the super set of documents that can be returned, without influencing score. 
            It can be very useful for speeding up complex queries since the queries specified with fq are cached independently from the main query. 
            This assumes the same Filter is used again for a latter query (i.e. there's a cache hit)
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Stats">
            <summary>
            This parameter can be used to return the stats for a specific query on top of the results that are normally returned.  Included in the stats are
            min, max, sum, count, missing, sumOfSquares, mean, and stddev values.  
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.Collapse">
            <summary>
            This parameter can be used to collapse - or group - documents by the unique values of a specified field. Included in the results are the number of
            records by document key and by field value
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.QueryOptions.ExtraParams">
            <summary>
            Extra arbitrary parameters to be passed in the request querystring
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrDocumentResponseParser`1">
            <summary>
            Parses documents from query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.Impl.ISolrDocumentResponseParser`1">
            <summary>
            Parses documents from query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ISolrDocumentResponseParser`1.ParseResults(System.Xml.XmlNode)">
            <summary>
            Parses documents from query response
            </summary>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrDocumentResponseParser`1.ParseResults(System.Xml.XmlNode)">
            <summary>
            Parses documents results
            </summary>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrDocumentResponseParser`1.ParseDocument(System.Xml.XmlNode,System.Collections.Generic.ICollection{SolrNet.SolrFieldModel})">
            <summary>
            Builds a document from the corresponding response xml node
            </summary>
            <param name="node">response xml node</param>
            <param name="fields">document fields</param>
            <returns>populated document</returns>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.ResultsResponseParser`1">
            <summary>
            Parses documents from a query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.HeaderResponseParser`1">
            <summary>
            Parses header (status, QTime, etc) from a query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.HeaderResponseParser`1.ParseHeader(System.Xml.XmlNode)">
            <summary>
            Parses response header
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Commands.Parameters.StatsParameters">
            <summary>
            Parameters to query stats
            <see cref="!:http://wiki.apache.org/solr/StatsComponent"/>
            </summary>
        </member>
        <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFacet(System.String)">
            <summary>
            Adds a facet to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.Facets"/> collection
            </summary>
            <param name="facet"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddField(System.String)">
            <summary>
            Adds a field (without facets) to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets"/> collection
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFieldWithFacet(System.String,System.String)">
            <summary>
            Adds a field with a related facet to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets"/> collection
            </summary>
            <param name="field"></param>
            <param name="facet"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFieldWithFacets(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a field with related facets to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets"/> collection
            </summary>
            <param name="field"></param>
            <param name="facets"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Commands.Parameters.StatsParameters.AddFieldWithFacets(System.String,System.String[])">
            <summary>
            Adds a field with related facets to the <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets"/> collection
            </summary>
            <param name="field"></param>
            <param name="facets"></param>
            <returns></returns>
        </member>
        <member name="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets">
            <summary>
            Dictionary of fields to get stats, and their associated facets (if any)
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.StatsParameters.Facets">
            <summary>
            Global facets: get these facets' stats for all fields requested in <see cref="P:SolrNet.Commands.Parameters.StatsParameters.FieldsWithFacets"/>
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.Queries">
            <summary>
            Collection of facet queries
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.Prefix">
            <summary>
            Limits the terms on which to facet to those starting with the given string prefix.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.Sort">
            <summary>
            Set to true, this parameter indicates that constraints should be sorted by their count. 
            If false, facets will be in their natural index order (unicode). 
            For terms in the ascii range, this will be alphabetically sorted. 
            The default is true if Limit is greater than 0, false otherwise.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.Limit">
            <summary>
            This param indicates the maximum number of constraint counts that should be returned for the facet fields. 
            A negative value means unlimited. 
            The default value is 100. 
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.Offset">
            <summary>
            This param indicates an offset into the list of constraints to allow paging. 
            The default value is 0. 
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.MinCount">
            <summary>
            This param indicates the minimum counts for facet fields should be included in the response.
            The default value is 0.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.Missing">
            <summary>
            Set to true this param indicates that in addition to the Term based constraints of a facet field, a count of all matching results which have no value for the field should be computed
            Default is false
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.FacetParameters.EnumCacheMinDf">
            <summary>
            This param indicates the minimum document frequency (number of documents matching a term) for which the filterCache should be used when determining the constraint count for that term. 
            This is only used during the term enumeration method of faceting (field type faceting on multi-valued or full-text fields).
            A value greater than zero will decrease memory usage of the filterCache, but increase the query time. 
            When faceting on a field with a very large number of terms, and you wish to decrease memory usage, try a low value of 25 to 50 first.
            The default value is 0, causing the filterCache to be used for all terms in the field.
            </summary>
        </member>
        <member name="T:SolrNet.SolrQueryInList">
            <summary>
            Queries a field for a list of possible values
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrQueryExecuter`1">
            <summary>
            Executes queries
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.ISolrQueryExecuter`1">
            <summary>
            Executable query
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.ISolrQueryExecuter`1.Execute(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Executes the query and returns results
            </summary>
            <returns>query results</returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetAllParameters(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets Solr parameters for all defined query options
            </summary>
            <param name="Query"></param>
            <param name="Options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetFacetFieldOptions(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets Solr parameters for facet queries
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetMoreLikeThisParameters(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets Solr parameters for defined more-like-this options
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetFilterQueries(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets Solr parameters for defined filter queries
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetHighlightingParameters(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets Solr parameters for defined highlightings
            </summary>
            <param name="Options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetSpellCheckingParameters(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets solr parameters for defined spell-checking
            </summary>
            <param name="Options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetStatsQueryOptions(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets the Solr parameters for stats queries
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.GetCollapseQueryOptions(SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Gets the Solr parameters for collapse queries
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrQueryExecuter`1.Execute(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Executes the query and returns results
            </summary>
            <returns>query results</returns>
        </member>
        <member name="P:SolrNet.Impl.SolrQueryExecuter`1.DefaultRows">
            <summary>
            When the row count is not defined, use this row count by default
            </summary>
        </member>
        <member name="T:SolrNet.SolrFacetQuery">
            <summary>
            Arbitrary facet query
            </summary>
        </member>
        <member name="T:SolrNet.ISolrOperations`1">
            <summary>
            Consolidating interface, exposes all operations
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="T:SolrNet.ISolrReadOnlyOperations`1">
            <summary>
            Read-only operations
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(System.String)">
            <summary>
            Executes a query
            </summary>
            <param name="q">query to execute</param>
            <returns>query results</returns>
        </member>
        <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(System.String,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
            <summary>
            Executes a query
            </summary>
            <param name="q"></param>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(System.String,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Executes a query
            </summary>
            <param name="q"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(SolrNet.ISolrQuery)">
            <summary>
            Executes a query
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrReadOnlyOperations`1.Query(SolrNet.ISolrQuery,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
            <summary>
            Executes a query
            </summary>
            <param name="query"></param>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrReadOnlyOperations`1.FacetFieldQuery(SolrNet.SolrFacetFieldQuery)">
            <summary>
            Executes a single facet field query
            </summary>
            <param name="facets"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Commit">
            <summary>
            Commits posted documents, 
            blocking until index changes are flushed to disk and
            blocking until a new searcher is opened and registered as the main query searcher, making the changes visible.
            </summary>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Optimize">
            <summary>
            Optimizes Solr's index
            </summary>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Add(`0)">
            <summary>
            Adds / updates a document
            </summary>
            <param name="doc">document to add/update</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.AddWithBoost(`0,System.Double)">
            <summary>
            Adds / updates a document with index-time boost
            </summary>
            <param name="doc"></param>
            <param name="boost"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds / updates several documents at once
            </summary>
            <param name="docs">documents to add/update</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.AddWithBoost(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Nullable{System.Double}}})">
            <summary>
            Adds / updates documents with index-time boost
            </summary>
            <param name="docs">List of docs / boost. If boost is null, no boost is applied</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Delete(`0)">
            <summary>
            Deletes a document (requires the document to have a unique key defined with non-null value)
            </summary>
            <param name="doc">document to delete</param>
            <returns></returns>
            <exception cref="T:SolrNet.Exceptions.NoUniqueKeyException">throws if document type doesn't have a unique key or document has null unique key</exception>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Deletes several documents (requires the document type to have a unique key defined with non-null value)
            </summary>
            <param name="docs"></param>
            <returns></returns>
            <exception cref="T:SolrNet.Exceptions.NoUniqueKeyException">throws if document type doesn't have a unique key or document has null unique key</exception>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Delete(SolrNet.ISolrQuery)">
            <summary>
            Deletes all documents that match a query
            </summary>
            <param name="q">query to match</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Delete(System.String)">
            <summary>
            Deletes a document by its id (unique key)
            </summary>
            <param name="id">document key</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Deletes several documents by their id (unique key)
            </summary>
            <param name="ids">document unique keys</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.Delete(System.Collections.Generic.IEnumerable{System.String},SolrNet.ISolrQuery)">
            <summary>
            Deletes all documents that match the given id's or the query
            </summary>
            <param name="ids">document unique keys</param>
            <param name="q">query to match</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.ISolrOperations`1.BuildSpellCheckDictionary">
            <summary>
            Create the dictionary for use by the SolrSpellChecker. 
            In typical applications, one needs to build the dictionary before using it. 
            However, it may not always be necessary as it is possible to setup the spellchecker with a dictionary that already exists.
            </summary>
        </member>
        <member name="T:SolrNet.Mapping.AllPropertiesMappingManager">
            <summary>
            Maps all properties in the class, with the same field name as the property.
            Note that unique keys must be added manually.
            </summary>
        </member>
        <member name="M:SolrNet.Mapping.AllPropertiesMappingManager.SetUniqueKey(System.Reflection.PropertyInfo)">
            <summary>
            Sets the property that acts as unique key for a document type
            </summary>
            <param name="property">Unique key property</param>
        </member>
        <member name="T:SolrNet.Impl.SolrDocumentIndexer`1">
            <summary>
            Indexes documents by primary key
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.SolrDocumentIndexer`1.IndexResultsByKey(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates an index of documents by unique key
            </summary>
            <param name="results"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Utils.Memoizer">
            <summary>
            Function memoizer
            From http://blogs.msdn.com/wesdyer/archive/2007/01/26/function-memoization.aspx
            </summary>
        </member>
        <member name="M:SolrNet.Utils.Memoizer.Memoize``2(System.Converter{``0,``1})">
            <summary>
            Function memoizer
            From http://blogs.msdn.com/wesdyer/archive/2007/01/26/function-memoization.aspx
            </summary>
        </member>
        <member name="T:SolrNet.RandomSortOrder">
            <summary>
            Random sorting of results
            Requires Solr 1.3+
            </summary>
        </member>
        <member name="T:SolrNet.SortOrder">
            <summary>
            Sorting order
            </summary>
        </member>
        <member name="M:SolrNet.RandomSortOrder.#ctor(System.String)">
            <summary>
            Random sorting with random seed
            </summary>
            <param name="fieldName">Random sorting field as defined in schema.xml</param>
        </member>
        <member name="M:SolrNet.RandomSortOrder.#ctor(System.String,SolrNet.Order)">
            <summary>
            Random sorting with random seed, with specified order
            </summary>
            <param name="fieldName">Random sorting field as defined in schema.xml</param>
            <param name="order">Sort order (asc/desc)</param>
        </member>
        <member name="M:SolrNet.RandomSortOrder.#ctor(System.String,System.String)">
            <summary>
            Random sorting with specified seed
            </summary>
            <param name="fieldName">Random sorting field as defined in schema.xml</param>
            <param name="seed">Random seed</param>
        </member>
        <member name="M:SolrNet.RandomSortOrder.#ctor(System.String,System.String,SolrNet.Order)">
            <summary>
            Random sorting with specified seed, with specified order
            </summary>
            <param name="fieldName">Random sorting field as defined in schema.xml</param>
            <param name="seed">Random seed</param>
            <param name="order">Sort order (asc/desc)</param>
        </member>
        <member name="T:SolrNet.Exceptions.InvalidSortOrderException">
            <summary>
            Error parsing <see cref="T:SolrNet.SortOrder"/>
            </summary>
        </member>
        <member name="T:SolrNet.Commands.DeleteCommand">
            <summary>
            Deletes document(s), either by id or by query
            </summary>
        </member>
        <member name="P:SolrNet.Commands.DeleteCommand.FromPending">
            <summary>
            Deprecated in Solr 1.3
            </summary>
        </member>
        <member name="P:SolrNet.Commands.DeleteCommand.FromCommitted">
            <summary>
            Deprecated in Solr 1.3
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.HighlightingParameters">
            <summary>
            Highlighting parameters
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Fields">
            <summary>
            List of fields to generate highlighted snippets for. 
            If left blank, the fields highlighted for the StandardRequestHandler are the defaultSearchField (or the df param if used) 
            and for the DisMaxRequestHandler the qf fields are used. 
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Snippets">
            <summary>
            The maximum number of highlighted snippets to generate per field. 
            It is possible for any number of snippets from zero to this value to be generated.
            If left null, it will use whatever default Solr sets (1 for Solr 1.3)
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.Fragsize">
            <summary>
            The size, in characters, of fragments to consider for highlighting. 
            0 indicates that the whole field value should be used (no fragmenting). 
            If left null, it will use whatever default Solr sets (100 for Solr 1.3)
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RequireFieldMatch">
            <summary>
            If true, then a field will only be highlighted if the query matched in this particular field (normally, terms are highlighted in all requested fields regardless of which field matched the query).
            If left null, it will use whatever default Solr sets (false for Solr 1.3)
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.AlternateField">
            <summary>
            If a snippet cannot be generated (due to no terms matching), you can specify a field to use as the backup/default summary.
            The default value is to not have a default summary. 
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.BeforeTerm">
            <summary>
            The text which appears before a highlighted term.
            The default value is "&lt;em&gt;"
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.AfterTerm">
            <summary>
            The text which appears after a highlighted term.
            The default value is "&lt;/em&gt;"
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RegexSlop">
            <summary>
            Factor by which the regex fragmenter can stray from the ideal fragment size (given by hl.fragsize) to accomodate the regular expression. 
            For instance, a slop of 0.2 with fragsize of 100 should yield fragments between 80 and 120 characters in length. 
            It is usually good to provide a slightly smaller fragsize when using the regex fragmenter. 
            The default value is ".6"
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RegexPattern">
            <summary>
            The regular expression for fragmenting. 
            This could be used to extract sentences
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.HighlightingParameters.RegexMaxAnalyzedChars">
            <summary>
            Only analyze this many characters from a field when using the regex fragmenter (after which, the fragmenter produces fixed-sized fragments). 
            Applying a complicated regex to a huge field is expensive.
            The default value is "10000". 
            </summary>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.StatsResponseParser`1">
            <summary>
            Parses stats results from a query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.StatsResponseParser`1.ParseStats(System.Xml.XmlNode,System.String)">
            <summary>
            Parses the stats results and uses recursion to get any facet results
            </summary>
            <param name="node"></param>
            <param name="selector">Start with 'stats_fields'</param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Attributes.SolrFieldAttribute">
            <summary>
            Marks a property as present on solr. By default the field name is the property name
            </summary>
        </member>
        <member name="M:SolrNet.Attributes.SolrFieldAttribute.#ctor(System.String)">
            <summary>
            Overrides field name
            </summary>
            <param name="fieldName"></param>
        </member>
        <member name="P:SolrNet.Attributes.SolrFieldAttribute.FieldName">
            <summary>
            Overrides field name
            </summary>
        </member>
        <member name="P:SolrNet.Attributes.SolrFieldAttribute.Boost">
            <summary>
            Adds an index time boost to a field.
            </summary>
        </member>
        <member name="T:SolrNet.Impl.HttpRuntimeCache">
            <summary>
            Uses the HttpRuntime (ASP.NET) cache
            </summary>
        </member>
        <member name="P:SolrNet.Impl.HttpRuntimeCache.SlidingMinutes">
            <summary>
            Cache sliding minutes. By default 10 minutes
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.NullableFieldParser">
            <summary>
            Wraps a <see cref="T:SolrNet.Impl.ISolrFieldParser"/> making it support the corresponding <see cref="T:System.Nullable`1"/> type
            </summary>
        </member>
        <member name="T:SolrNet.Utils.TypeHelper">
            <summary>
            <see cref="T:System.Type"/>-related helper functions
            </summary>
        </member>
        <member name="T:SolrNet.Utils.Func">
            <summary>
            Functional utilities
            Mostly from http://diditwith.net/PermaLink,guid,a1a76478-03d2-428f-9db6-9cf4e300ea0f.aspx
            </summary>
        </member>
        <member name="M:SolrNet.Utils.Func.Convert``1(System.Collections.IEnumerable)">
            <summary>
            This is a conversion cast, unlike LINQ's Cast()
            </summary>
            <typeparam name="R"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.SolrHasValueQuery">
            <summary>
            Queries documents that have any value in the specified field
            </summary>
        </member>
        <member name="T:SolrNet.Mapping.IMappingManager">
            <summary>
            Mapping manager abstraction
            </summary>
        </member>
        <member name="M:SolrNet.Mapping.IMappingManager.Add(System.Reflection.PropertyInfo)">
            <summary>
            Maps a property with the property name as Solr field name
            </summary>
            <param name="property">Document type property</param>
        </member>
        <member name="M:SolrNet.Mapping.IMappingManager.Add(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Maps a property
            </summary>
            <param name="property">Document type property</param>
            <param name="fieldName">Solr field name</param>
        </member>
        <member name="M:SolrNet.Mapping.IMappingManager.Add(System.Reflection.PropertyInfo,System.String,System.Nullable{System.Single})">
            <summary>
            Maps a property
            </summary>
            <param name="property">Document type property</param>
            <param name="fieldName">Solr field name</param>
            <param name="boost">Index-time boosting</param>
        </member>
        <member name="M:SolrNet.Mapping.IMappingManager.SetUniqueKey(System.Reflection.PropertyInfo)">
            <summary>
            Sets unique key for a document type
            </summary>
            <param name="property">Document type property</param>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1">
            <summary>
            Parses facets from query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetQueries(System.Xml.XmlNode)">
            <summary>
            Parses facet queries results
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetFields(System.Xml.XmlNode)">
            <summary>
            Parses facet fields results
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.FacetsResponseParser`1.ParseFacetDates(System.Xml.XmlNode)">
            <summary>
            Parses facet dates results
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.IntFieldParser">
            <summary>
            Parses int values
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.DoubleFieldParser">
            <summary>
            Parses double fields
            </summary>
        </member>
        <member name="T:SolrNet.Attributes.SolrUniqueKeyAttribute">
            <summary>
            Marks a property as unique key. By default the field name is the property name.
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrDictionarySerializer">
            <summary>
            Serializes a dictionary document
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.DefaultFieldParser">
            <summary>
            Default field parser
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.AggregateFieldParser">
            <summary>
            Aggregates <see cref="T:SolrNet.Impl.ISolrFieldParser"/>s
            </summary>
        </member>
        <member name="M:SolrNet.Impl.FieldParsers.AggregateFieldParser.#ctor(System.Collections.Generic.IEnumerable{SolrNet.Impl.ISolrFieldParser})">
            <summary>
            Aggregates <see cref="T:SolrNet.Impl.ISolrFieldParser"/>s
            </summary>
            <param name="parsers"></param>
        </member>
        <member name="T:SolrNet.SolrFieldModel">
            <summary>
             Represents the Solr Field to be serialized into XML.
            </summary>
        </member>
        <member name="P:SolrNet.SolrFieldModel.Property">
            <summary>
            Class property where the field value is stored
            </summary>
        </member>
        <member name="P:SolrNet.SolrFieldModel.FieldName">
            <summary>
            Named of the field in the Solr schema
            </summary>
        </member>
        <member name="P:SolrNet.SolrFieldModel.Boost">
            <summary>
            Optional index-time field boosting
            </summary>
        </member>
        <member name="T:SolrNet.Mapping.MappingManager">
            <summary>
            Manual mapping manager
            </summary>
        </member>
        <member name="M:SolrNet.Mapping.MappingManager.GetFields(System.Type)">
            <summary>
            Gets fields mapped for this type
            </summary>
            <param name="type">Document type</param>
            <returns>Null if <paramref name="type"/> is not mapped</returns>
        </member>
        <member name="T:SolrNet.LocalParams">
            <summary>
            Provides a way to "localize" information about a specific argument that is being sent to Solr. 
            In other words, it provides a way to add meta-data to certain argument types such as query strings.
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrDictionaryDocumentResponseParser">
            <summary>
            Parses a solr result into a dictionary of (string, object)
            </summary>
        </member>
        <member name="T:SolrNet.Impl.DocumentPropertyVisitors.AggregateDocumentVisitor">
            <summary>
            Aggregate document visitor
            </summary>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.AggregateDocumentVisitor.#ctor(System.Collections.Generic.IEnumerable{SolrNet.Impl.ISolrDocumentPropertyVisitor})">
            <summary>
            Aggregate document visitor
            </summary>
            <param name="visitors">Visitors to aggregate</param>
        </member>
        <member name="T:SolrNet.StatsResult">
            <summary>
            Stats results
            <see cref="!:http://wiki.apache.org/solr/StatsComponent"/>
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.Min">
            <summary>
            Minimum value
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.Max">
            <summary>
            Maximum value
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.Sum">
            <summary>
            Sum of all values
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.Count">
            <summary>
            How many (non-null) values
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.Missing">
            <summary>
            How many null values
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.SumOfSquares">
            <summary>
            Sum of all values squared (useful for stddev)
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.Mean">
            <summary>
            The average (v1+v2...+vN)/N
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.StdDev">
            <summary>
            Standard deviation
            </summary>
        </member>
        <member name="P:SolrNet.StatsResult.FacetResults">
            <summary>
            Facet results.
            <list type="bullet">
            <item>Key is the facet field</item>
            <item>Value is a dictionary where:
            <list type="bullet">
            <item>Key is the facet value</item>
            <item>Value is the stats for the facet value</item>
            </list>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:SolrNet.Commands.AddCommand`1">
            <summary>
            Adds / updates documents to solr
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Commands.AddCommand`1.RemoveControlCharacters(System.String)">
            <summary>
            Removes UTF control characters, not valid in XML
            </summary>
            <param name="xml"></param>
            <returns></returns>
            <see cref="!:http://cse-mjmcl.cse.bris.ac.uk/blog/2007/02/14/1171465494443.html#comment1221120563572"/>
        </member>
        <member name="T:SolrNet.Impl.SpellCheckResult">
            <summary>
            Spell-checking results
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SpellCheckResult.Query">
            <summary>
            Original query term
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SpellCheckResult.NumFound">
            <summary>
            Result count for original term
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SpellCheckResult.StartOffset">
            <summary>
            Start offset
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SpellCheckResult.EndOffset">
            <summary>
            End offset
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SpellCheckResult.Suggestions">
            <summary>
            Spelling suggestions
            </summary>
        </member>
        <member name="T:SolrNet.FacetDateOther">
            <summary>
            Indicates that in addition to the counts for each date range constraint between facet.date.start and facet.date.end, 
            counts should also be computed for other
            </summary>
        </member>
        <member name="P:SolrNet.FacetDateOther.Before">
            <summary>
            All records with field values lower then lower bound of the first range
            </summary>
        </member>
        <member name="P:SolrNet.FacetDateOther.After">
            <summary>
            All records with field values greater then the upper bound of the last range
            </summary>
        </member>
        <member name="P:SolrNet.FacetDateOther.Between">
            <summary>
            All records with field values between the start and end bounds of all ranges
            </summary>
        </member>
        <member name="P:SolrNet.FacetDateOther.None">
            <summary>
            Compute none of this information. Overrides all other options.
            </summary>
        </member>
        <member name="P:SolrNet.FacetDateOther.All">
            <summary>
            Shortcut for before, between, and after
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SolrServer`1">
            <summary>
            Main component to interact with Solr
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Query(SolrNet.ISolrQuery,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Executes a query
            </summary>
            <param name="query"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Query(System.String,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
            <summary>
            Executes a query
            </summary>
            <param name="q"></param>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Query(System.String,SolrNet.Commands.Parameters.QueryOptions)">
            <summary>
            Executes a query
            </summary>
            <param name="q"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Query(SolrNet.ISolrQuery)">
            <summary>
            Executes a query
            </summary>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Query(SolrNet.ISolrQuery,System.Collections.Generic.ICollection{SolrNet.SortOrder})">
            <summary>
            Executes a query
            </summary>
            <param name="query"></param>
            <param name="orders"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.FacetFieldQuery(SolrNet.SolrFacetFieldQuery)">
            <summary>
            Executes a facet field query only
            </summary>
            <param name="facet"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Optimize(SolrNet.Commands.Parameters.CommitOptions)">
            <summary>
            Commits posts
            </summary>
        </member>
        <member name="M:SolrNet.Impl.SolrServer`1.Optimize">
            <summary>
            Commits posts, 
            blocking until index changes are flushed to disk and
            blocking until a new searcher is opened and registered as the main query searcher, making the changes visible.
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.CollectionTypeNotSupportedException">
            <summary>
            Thrown when an unknown collection type needed to be mapped to Solr
            </summary>
        </member>
        <member name="T:SolrNet.Mapping.AttributesMappingManager">
            <summary>
            Gets mapping info from attributes like <see cref="T:SolrNet.Attributes.SolrFieldAttribute"/> and <see cref="T:SolrNet.Attributes.SolrUniqueKeyAttribute"/>
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.AggregateFieldSerializer">
            <summary>
            Aggregates <see cref="T:SolrNet.Impl.ISolrFieldSerializer"/>s
            </summary>
        </member>
        <member name="T:SolrNet.Exceptions.NoUniqueKeyException">
            <summary>
            No unique key found (either mapping or value) when one was required.
            </summary>
        </member>
        <member name="T:SolrNet.Commands.CommitCommand">
            <summary>
            Commits updates
            </summary>
        </member>
        <member name="P:SolrNet.Commands.CommitCommand.WaitFlush">
            <summary>
            Block until index changes are flushed to disk
            Default is true
            </summary>
        </member>
        <member name="P:SolrNet.Commands.CommitCommand.WaitSearcher">
            <summary>
            Block until a new searcher is opened and registered as the main query searcher, making the changes visible. 
            Default is true
            </summary>
        </member>
        <member name="P:SolrNet.Commands.CommitCommand.ExpungeDeletes">
            <summary>
            Merge segments with deletes away
            Default is false
            </summary>
        </member>
        <member name="P:SolrNet.Commands.CommitCommand.MaxSegments">
            <summary>
            Optimizes down to, at most, this number of segments
            Default is 1
            </summary>
        </member>
        <member name="T:SolrNet.Impl.ResponseParsers.CollapseResponseParser`1">
            <summary>
            Parses collapse_counts from query response
            </summary>
            <typeparam name="T">Document type</typeparam>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.CollapseResponseParser`1.ParseDocResults(System.Xml.XmlNode)">
            <summary>
            Parses collapsed document.ids and their counts
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.ResponseParsers.CollapseResponseParser`1.ParseCountResults(System.Xml.XmlNode)">
            <summary>
            Parses collapsed field values and their counts
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SolrNet.Impl.PropertyNode">
            <summary>
            Models a XML node for update consumption
            </summary>
        </member>
        <member name="P:SolrNet.Impl.PropertyNode.FieldValue">
            <summary>
            Serialized field value
            </summary>
        </member>
        <member name="P:SolrNet.Impl.PropertyNode.FieldNameSuffix">
            <summary>
            Optional field name suffix
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.NullableFieldSerializer">
            <summary>
            Wraps a <see cref="T:SolrNet.Impl.ISolrFieldSerializer"/> making it support the corresponding <see cref="T:System.Nullable`1"/> type
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.DefaultFieldSerializer">
            <summary>
            Aggregates the default <see cref="T:SolrNet.Impl.ISolrFieldSerializer"/>s
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.DateTimeFieldSerializer">
            <summary>
            Serializes datetime fields
            </summary>
        </member>
        <member name="T:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor">
            <summary>
            Document visitor that handles generic dictionary properties
            </summary>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.#ctor(SolrNet.IReadOnlyMappingManager,SolrNet.Impl.ISolrFieldParser)">
            <summary>
            Document visitor that handles generic dictionary properties
            </summary>
            <param name="mapper"></param>
            <param name="parser"></param>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.CanHandleType(System.Type)">
            <summary>
            True if this visitor can handle this Type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.NewDictionary(System.Type[])">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <param name="typeArgs">Key and Value type parameters</param>
            <returns></returns>
        </member>
        <member name="M:SolrNet.Impl.DocumentPropertyVisitors.GenericDictionaryDocumentVisitor.SetKV(System.Object,System.Object,System.Object)">
            <summary>
            Sets a key/value in a generic dictionary
            </summary>
            <param name="dict"><see cref="T:System.Collections.Generic.Dictionary`2"/> instance</param>
            <param name="key">Key value</param>
            <param name="value">Value value</param>
        </member>
        <member name="T:SolrNet.SolrNotQuery">
            <summary>
            Negates a query
            </summary>
        </member>
        <member name="M:SolrNet.SolrNotQuery.#ctor(SolrNet.ISolrQuery)">
            <summary>
            Negates a query
            </summary>
            <param name="q"></param>
        </member>
        <member name="T:SolrNet.SolrFacetDateQuery">
            <summary>
            Date facet query
            <see cref="!:http://wiki.apache.org/solr/SimpleFacetParameters#Date_Faceting_Parameters"/>
            </summary>
        </member>
        <member name="M:SolrNet.SolrFacetDateQuery.#ctor(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Creates a date facet query
            </summary>
            <param name="field">Field to facet</param>
            <param name="start">The lower bound for the first date range for all Date Faceting on this field</param>
            <param name="end">The minimum upper bound for the last date range for all Date Faceting on this field</param>
            <param name="gap">
            The size of each date range expressed as an interval to be added to the lower bound using the DateMathParser syntax.
            <see cref="!:http://lucene.apache.org/solr/api/org/apache/solr/util/DateMathParser.html"/>
            </param>
        </member>
        <member name="P:SolrNet.SolrFacetDateQuery.HardEnd">
            <summary>
            What to do in the event that the gap does not divide evenly between start and end. 
            If this is true, the last date range constraint will have an upper bound of end; 
            if false, the last date range will have the smallest possible upper bound greater then end such that the range is exactly gap wide. 
            The default is false.
            </summary>
        </member>
        <member name="P:SolrNet.SolrFacetDateQuery.Other">
            <summary>
            Indicates that in addition to the counts for each date range constraint between start and end, counts should also be computed for other
            </summary>
        </member>
        <member name="T:SolrNet.Impl.SpellCheckResults">
            <summary>
            Spell-checking query results
            </summary>
        </member>
        <member name="P:SolrNet.Impl.SpellCheckResults.Collation">
            <summary>
            Suggestion query from spell-checking
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldSerializers.FormattableFieldSerializer">
            <summary>
            Serializes objects that implement <see cref="T:System.IFormattable"/>
            </summary>
        </member>
        <member name="T:SolrNet.Impl.FieldParsers.InferringFieldParser">
            <summary>
            Parser that infers .net type based on solr type
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.SpellCheckingParameters">
            <summary>
            Spell checking parameters
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Query">
            <summary>
            The query to spellcheck. 
            If spellcheck.q is defined, then it is used, otherwise the original input query is used. 
            The spellcheck.q parameter is intended to be the original query, minus any extra markup like field names, boosts, etc. 
            If the q parameter is specified, then the SpellingQueryConverter class is used to parse it into tokens, otherwise the WhitesepaceTokenizer is used. 
            The choice of which one to use is up to the application. 
            Essentially, if you have a spelling "ready" version in your application, then it is probably better to send spellcheck.q, otherwise, 
            if you just want Solr to do the job, use the q parameter
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Build">
            <summary>
            Create the dictionary for use by the SolrSpellChecker. 
            In typical applications, one needs to build the dictionary before using it. 
            However, it may not always be necessary as it is possible to setup the spellchecker with a dictionary that already exists.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Reload">
            <summary>
            Reload the spell checker. 
            Depends on the implementation of SolrSpellChecker.reload() but usually means reloading the dictionary
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Count">
            <summary>
            The maximum number of suggestions to return
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.OnlyMorePopular">
            <summary>
            Only return suggestions that result in more hits for the query than the existing query.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Collate">
            <summary>
            Take the best suggestion for each token (if it exists) and construct a new query from the suggestions
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.SpellCheckingParameters.Dictionary">
            <summary>
            The name of the spellchecker to use. 
            This defaults to "default". 
            Can be used to invoke a specific spellchecker on a per request basis.
            </summary>
        </member>
        <member name="T:SolrNet.Commands.Parameters.MoreLikeThisParameters">
            <summary>
            More-like-this parameters
            See http://wiki.apache.org/solr/MoreLikeThis
            </summary>
        </member>
        <member name="M:SolrNet.Commands.Parameters.MoreLikeThisParameters.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates more-like-this parameters
            </summary>
            <param name="fields">The fields to use for similarity. </param>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Fields">
            <summary>
            The fields to use for similarity. 
            NOTE: if possible, these should have a stored TermVector
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MinTermFreq">
            <summary>
            Minimum Term Frequency - the frequency below which terms will be ignored in the source doc.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MinDocFreq">
            <summary>
            Minimum Document Frequency - the frequency at which words will be ignored which do not occur in at least this many docs.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MinWordLength">
            <summary>
            Minimum word length below which words will be ignored.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MaxWordLength">
            <summary>
            Maximum word length above which words will be ignored.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MaxQueryTerms">
            <summary>
            Maximum number of query terms that will be included in any generated query.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.MaxTokens">
            <summary>
            Maximum number of tokens to parse in each example doc field that is not stored with TermVector support.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Boost">
            <summary>
            Set if the query will be boosted by the interesting term relevance.
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.QueryFields">
            <summary>
            Query fields and their boosts using the same format as that used in DisMaxRequestHandler. 
            These fields must also be specified in <see cref="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Fields"/>
            </summary>
        </member>
        <member name="P:SolrNet.Commands.Parameters.MoreLikeThisParameters.Count">
            <summary>
            The number of similar documents to return for each result.
            </summary>
        </member>
    </members>
</doc>
